//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    static readonly UnitIdComponent unitIdComponent = new UnitIdComponent();

    public bool isUnitId {
        get { return HasComponent(GameComponentsLookup.UnitId); }
        set {
            if (value != isUnitId) {
                var index = GameComponentsLookup.UnitId;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : unitIdComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherUnitId;

    public static Entitas.IMatcher<GameEntity> UnitId {
        get {
            if (_matcherUnitId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.UnitId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherUnitId = matcher;
            }

            return _matcherUnitId;
        }
    }
}
