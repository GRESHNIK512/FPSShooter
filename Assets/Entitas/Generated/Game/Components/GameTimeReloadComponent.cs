//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public TimeReloadComponent timeReload { get { return (TimeReloadComponent)GetComponent(GameComponentsLookup.TimeReload); } }
    public bool hasTimeReload { get { return HasComponent(GameComponentsLookup.TimeReload); } }

    public void AddTimeReload(float newValue) {
        var index = GameComponentsLookup.TimeReload;
        var component = (TimeReloadComponent)CreateComponent(index, typeof(TimeReloadComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTimeReload(float newValue) {
        var index = GameComponentsLookup.TimeReload;
        var component = (TimeReloadComponent)CreateComponent(index, typeof(TimeReloadComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTimeReload() {
        RemoveComponent(GameComponentsLookup.TimeReload);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTimeReload;

    public static Entitas.IMatcher<GameEntity> TimeReload {
        get {
            if (_matcherTimeReload == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TimeReload);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTimeReload = matcher;
            }

            return _matcherTimeReload;
        }
    }
}
