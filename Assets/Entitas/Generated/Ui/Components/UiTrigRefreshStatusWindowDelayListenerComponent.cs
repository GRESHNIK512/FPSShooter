//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class UiEntity {

    public TrigRefreshStatusWindowDelayListenerComponent trigRefreshStatusWindowDelayListener { get { return (TrigRefreshStatusWindowDelayListenerComponent)GetComponent(UiComponentsLookup.TrigRefreshStatusWindowDelayListener); } }
    public bool hasTrigRefreshStatusWindowDelayListener { get { return HasComponent(UiComponentsLookup.TrigRefreshStatusWindowDelayListener); } }

    public void AddTrigRefreshStatusWindowDelayListener(System.Collections.Generic.List<ITrigRefreshStatusWindowDelayListener> newValue) {
        var index = UiComponentsLookup.TrigRefreshStatusWindowDelayListener;
        var component = (TrigRefreshStatusWindowDelayListenerComponent)CreateComponent(index, typeof(TrigRefreshStatusWindowDelayListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTrigRefreshStatusWindowDelayListener(System.Collections.Generic.List<ITrigRefreshStatusWindowDelayListener> newValue) {
        var index = UiComponentsLookup.TrigRefreshStatusWindowDelayListener;
        var component = (TrigRefreshStatusWindowDelayListenerComponent)CreateComponent(index, typeof(TrigRefreshStatusWindowDelayListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTrigRefreshStatusWindowDelayListener() {
        RemoveComponent(UiComponentsLookup.TrigRefreshStatusWindowDelayListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class UiMatcher {

    static Entitas.IMatcher<UiEntity> _matcherTrigRefreshStatusWindowDelayListener;

    public static Entitas.IMatcher<UiEntity> TrigRefreshStatusWindowDelayListener {
        get {
            if (_matcherTrigRefreshStatusWindowDelayListener == null) {
                var matcher = (Entitas.Matcher<UiEntity>)Entitas.Matcher<UiEntity>.AllOf(UiComponentsLookup.TrigRefreshStatusWindowDelayListener);
                matcher.componentNames = UiComponentsLookup.componentNames;
                _matcherTrigRefreshStatusWindowDelayListener = matcher;
            }

            return _matcherTrigRefreshStatusWindowDelayListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class UiEntity {

    public void AddTrigRefreshStatusWindowDelayListener(ITrigRefreshStatusWindowDelayListener value) {
        var listeners = hasTrigRefreshStatusWindowDelayListener
            ? trigRefreshStatusWindowDelayListener.value
            : new System.Collections.Generic.List<ITrigRefreshStatusWindowDelayListener>();
        listeners.Add(value);
        ReplaceTrigRefreshStatusWindowDelayListener(listeners);
    }

    public void RemoveTrigRefreshStatusWindowDelayListener(ITrigRefreshStatusWindowDelayListener value, bool removeComponentWhenEmpty = true) {
        var listeners = trigRefreshStatusWindowDelayListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveTrigRefreshStatusWindowDelayListener();
        } else {
            ReplaceTrigRefreshStatusWindowDelayListener(listeners);
        }
    }
}
